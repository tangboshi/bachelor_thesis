# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_inets_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_inets_swig')
    _inets_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_inets_swig', [dirname(__file__)])
        except ImportError:
            import _inets_swig
            return _inets_swig
        try:
            _mod = imp.load_module('_inets_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _inets_swig = swig_import_helper()
    del swig_import_helper
else:
    import _inets_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _inets_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _inets_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _inets_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _inets_swig.high_res_timer_epoch()
class constellation(object):
    """Proxy of C++ gr::digital::constellation class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _inets_swig.delete_constellation
    __del__ = lambda self: None

    def map_to_points(self, value, points):
        """map_to_points(constellation self, unsigned int value, gr_complex * points)"""
        return _inets_swig.constellation_map_to_points(self, value, points)


    def map_to_points_v(self, value):
        """map_to_points_v(constellation self, unsigned int value) -> pmt_vector_cfloat"""
        return _inets_swig.constellation_map_to_points_v(self, value)


    def decision_maker(self, sample):
        """decision_maker(constellation self, gr_complex const * sample) -> unsigned int"""
        return _inets_swig.constellation_decision_maker(self, sample)


    def decision_maker_v(self, sample):
        """decision_maker_v(constellation self, pmt_vector_cfloat sample) -> unsigned int"""
        return _inets_swig.constellation_decision_maker_v(self, sample)


    def decision_maker_pe(self, sample, phase_error):
        """decision_maker_pe(constellation self, gr_complex const * sample, float * phase_error) -> unsigned int"""
        return _inets_swig.constellation_decision_maker_pe(self, sample, phase_error)


    def calc_metric(self, sample, metric, type):
        """calc_metric(constellation self, gr_complex const * sample, float * metric, gr::digital::trellis_metric_type_t type)"""
        return _inets_swig.constellation_calc_metric(self, sample, metric, type)


    def calc_euclidean_metric(self, sample, metric):
        """calc_euclidean_metric(constellation self, gr_complex const * sample, float * metric)"""
        return _inets_swig.constellation_calc_euclidean_metric(self, sample, metric)


    def calc_hard_symbol_metric(self, sample, metric):
        """calc_hard_symbol_metric(constellation self, gr_complex const * sample, float * metric)"""
        return _inets_swig.constellation_calc_hard_symbol_metric(self, sample, metric)


    def points(self):
        """points(constellation self) -> pmt_vector_cfloat"""
        return _inets_swig.constellation_points(self)


    def s_points(self):
        """s_points(constellation self) -> pmt_vector_cfloat"""
        return _inets_swig.constellation_s_points(self)


    def v_points(self):
        """v_points(constellation self) -> gr_vector_vector_complexf"""
        return _inets_swig.constellation_v_points(self)


    def apply_pre_diff_code(self):
        """apply_pre_diff_code(constellation self) -> bool"""
        return _inets_swig.constellation_apply_pre_diff_code(self)


    def set_pre_diff_code(self, a):
        """set_pre_diff_code(constellation self, bool a)"""
        return _inets_swig.constellation_set_pre_diff_code(self, a)


    def pre_diff_code(self):
        """pre_diff_code(constellation self) -> std::vector< int,std::allocator< int > >"""
        return _inets_swig.constellation_pre_diff_code(self)


    def rotational_symmetry(self):
        """rotational_symmetry(constellation self) -> unsigned int"""
        return _inets_swig.constellation_rotational_symmetry(self)


    def dimensionality(self):
        """dimensionality(constellation self) -> unsigned int"""
        return _inets_swig.constellation_dimensionality(self)


    def bits_per_symbol(self):
        """bits_per_symbol(constellation self) -> unsigned int"""
        return _inets_swig.constellation_bits_per_symbol(self)


    def arity(self):
        """arity(constellation self) -> unsigned int"""
        return _inets_swig.constellation_arity(self)


    def base(self):
        """base(constellation self) -> gr::digital::constellation_sptr"""
        return _inets_swig.constellation_base(self)


    def as_pmt(self):
        """as_pmt(constellation self) -> swig_int_ptr"""
        return _inets_swig.constellation_as_pmt(self)


    def gen_soft_dec_lut(self, precision, npwr=1.0):
        """gen_soft_dec_lut(constellation self, int precision, float npwr=1.0)"""
        return _inets_swig.constellation_gen_soft_dec_lut(self, precision, npwr)


    def calc_soft_dec(self, sample, npwr=1.0):
        """calc_soft_dec(constellation self, gr_complex sample, float npwr=1.0) -> pmt_vector_float"""
        return _inets_swig.constellation_calc_soft_dec(self, sample, npwr)


    def set_soft_dec_lut(self, soft_dec_lut, precision):
        """set_soft_dec_lut(constellation self, std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const & soft_dec_lut, int precision)"""
        return _inets_swig.constellation_set_soft_dec_lut(self, soft_dec_lut, precision)


    def has_soft_dec_lut(self):
        """has_soft_dec_lut(constellation self) -> bool"""
        return _inets_swig.constellation_has_soft_dec_lut(self)


    def soft_dec_lut(self):
        """soft_dec_lut(constellation self) -> std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > >"""
        return _inets_swig.constellation_soft_dec_lut(self)


    def soft_decision_maker(self, sample):
        """soft_decision_maker(constellation self, gr_complex sample) -> pmt_vector_float"""
        return _inets_swig.constellation_soft_decision_maker(self, sample)

constellation_swigregister = _inets_swig.constellation_swigregister
constellation_swigregister(constellation)

class constellation_calcdist(constellation):
    """Proxy of C++ gr::digital::constellation_calcdist class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(constell, pre_diff_code, rotational_symmetry, dimensionality):
        """make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, unsigned int rotational_symmetry, unsigned int dimensionality) -> gr::digital::constellation_calcdist::sptr"""
        return _inets_swig.constellation_calcdist_make(constell, pre_diff_code, rotational_symmetry, dimensionality)

    make = staticmethod(make)
    __swig_destroy__ = _inets_swig.delete_constellation_calcdist
    __del__ = lambda self: None
constellation_calcdist_swigregister = _inets_swig.constellation_calcdist_swigregister
constellation_calcdist_swigregister(constellation_calcdist)

def constellation_calcdist_make(constell, pre_diff_code, rotational_symmetry, dimensionality):
    """constellation_calcdist_make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, unsigned int rotational_symmetry, unsigned int dimensionality) -> gr::digital::constellation_calcdist::sptr"""
    return _inets_swig.constellation_calcdist_make(constell, pre_diff_code, rotational_symmetry, dimensionality)

class constellation_sector(constellation):
    """Proxy of C++ gr::digital::constellation_sector class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _inets_swig.delete_constellation_sector
    __del__ = lambda self: None
constellation_sector_swigregister = _inets_swig.constellation_sector_swigregister
constellation_sector_swigregister(constellation_sector)

class constellation_rect(constellation_sector):
    """Proxy of C++ gr::digital::constellation_rect class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(constell, pre_diff_code, rotational_symmetry, real_sectors, imag_sectors, width_real_sectors, width_imag_sectors):
        """make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, unsigned int rotational_symmetry, unsigned int real_sectors, unsigned int imag_sectors, float width_real_sectors, float width_imag_sectors) -> gr::digital::constellation_rect::sptr"""
        return _inets_swig.constellation_rect_make(constell, pre_diff_code, rotational_symmetry, real_sectors, imag_sectors, width_real_sectors, width_imag_sectors)

    make = staticmethod(make)
    __swig_destroy__ = _inets_swig.delete_constellation_rect
    __del__ = lambda self: None
constellation_rect_swigregister = _inets_swig.constellation_rect_swigregister
constellation_rect_swigregister(constellation_rect)

def constellation_rect_make(constell, pre_diff_code, rotational_symmetry, real_sectors, imag_sectors, width_real_sectors, width_imag_sectors):
    """constellation_rect_make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, unsigned int rotational_symmetry, unsigned int real_sectors, unsigned int imag_sectors, float width_real_sectors, float width_imag_sectors) -> gr::digital::constellation_rect::sptr"""
    return _inets_swig.constellation_rect_make(constell, pre_diff_code, rotational_symmetry, real_sectors, imag_sectors, width_real_sectors, width_imag_sectors)

class constellation_expl_rect(constellation_rect):
    """Proxy of C++ gr::digital::constellation_expl_rect class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(constellation, pre_diff_code, rotational_symmetry, real_sectors, imag_sectors, width_real_sectors, width_imag_sectors, sector_values):
        """make(pmt_vector_cfloat constellation, std::vector< int,std::allocator< int > > pre_diff_code, unsigned int rotational_symmetry, unsigned int real_sectors, unsigned int imag_sectors, float width_real_sectors, float width_imag_sectors, std::vector< unsigned int,std::allocator< unsigned int > > sector_values) -> gr::digital::constellation_expl_rect::sptr"""
        return _inets_swig.constellation_expl_rect_make(constellation, pre_diff_code, rotational_symmetry, real_sectors, imag_sectors, width_real_sectors, width_imag_sectors, sector_values)

    make = staticmethod(make)
    __swig_destroy__ = _inets_swig.delete_constellation_expl_rect
    __del__ = lambda self: None
constellation_expl_rect_swigregister = _inets_swig.constellation_expl_rect_swigregister
constellation_expl_rect_swigregister(constellation_expl_rect)

def constellation_expl_rect_make(constellation, pre_diff_code, rotational_symmetry, real_sectors, imag_sectors, width_real_sectors, width_imag_sectors, sector_values):
    """constellation_expl_rect_make(pmt_vector_cfloat constellation, std::vector< int,std::allocator< int > > pre_diff_code, unsigned int rotational_symmetry, unsigned int real_sectors, unsigned int imag_sectors, float width_real_sectors, float width_imag_sectors, std::vector< unsigned int,std::allocator< unsigned int > > sector_values) -> gr::digital::constellation_expl_rect::sptr"""
    return _inets_swig.constellation_expl_rect_make(constellation, pre_diff_code, rotational_symmetry, real_sectors, imag_sectors, width_real_sectors, width_imag_sectors, sector_values)

class constellation_psk(constellation_sector):
    """Proxy of C++ gr::digital::constellation_psk class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(constell, pre_diff_code, n_sectors):
        """make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, unsigned int n_sectors) -> gr::digital::constellation_psk::sptr"""
        return _inets_swig.constellation_psk_make(constell, pre_diff_code, n_sectors)

    make = staticmethod(make)
    __swig_destroy__ = _inets_swig.delete_constellation_psk
    __del__ = lambda self: None
constellation_psk_swigregister = _inets_swig.constellation_psk_swigregister
constellation_psk_swigregister(constellation_psk)

def constellation_psk_make(constell, pre_diff_code, n_sectors):
    """constellation_psk_make(pmt_vector_cfloat constell, std::vector< int,std::allocator< int > > pre_diff_code, unsigned int n_sectors) -> gr::digital::constellation_psk::sptr"""
    return _inets_swig.constellation_psk_make(constell, pre_diff_code, n_sectors)

class constellation_bpsk(constellation):
    """Proxy of C++ gr::digital::constellation_bpsk class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> gr::digital::constellation_bpsk::sptr"""
        return _inets_swig.constellation_bpsk_make()

    make = staticmethod(make)
    __swig_destroy__ = _inets_swig.delete_constellation_bpsk
    __del__ = lambda self: None
constellation_bpsk_swigregister = _inets_swig.constellation_bpsk_swigregister
constellation_bpsk_swigregister(constellation_bpsk)

def constellation_bpsk_make():
    """constellation_bpsk_make() -> gr::digital::constellation_bpsk::sptr"""
    return _inets_swig.constellation_bpsk_make()

class constellation_qpsk(constellation):
    """Proxy of C++ gr::digital::constellation_qpsk class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> gr::digital::constellation_qpsk::sptr"""
        return _inets_swig.constellation_qpsk_make()

    make = staticmethod(make)
    __swig_destroy__ = _inets_swig.delete_constellation_qpsk
    __del__ = lambda self: None
constellation_qpsk_swigregister = _inets_swig.constellation_qpsk_swigregister
constellation_qpsk_swigregister(constellation_qpsk)

def constellation_qpsk_make():
    """constellation_qpsk_make() -> gr::digital::constellation_qpsk::sptr"""
    return _inets_swig.constellation_qpsk_make()

class constellation_dqpsk(constellation):
    """Proxy of C++ gr::digital::constellation_dqpsk class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> gr::digital::constellation_dqpsk::sptr"""
        return _inets_swig.constellation_dqpsk_make()

    make = staticmethod(make)
    __swig_destroy__ = _inets_swig.delete_constellation_dqpsk
    __del__ = lambda self: None
constellation_dqpsk_swigregister = _inets_swig.constellation_dqpsk_swigregister
constellation_dqpsk_swigregister(constellation_dqpsk)

def constellation_dqpsk_make():
    """constellation_dqpsk_make() -> gr::digital::constellation_dqpsk::sptr"""
    return _inets_swig.constellation_dqpsk_make()

class constellation_8psk(constellation):
    """Proxy of C++ gr::digital::constellation_8psk class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> gr::digital::constellation_8psk::sptr"""
        return _inets_swig.constellation_8psk_make()

    make = staticmethod(make)
    __swig_destroy__ = _inets_swig.delete_constellation_8psk
    __del__ = lambda self: None
constellation_8psk_swigregister = _inets_swig.constellation_8psk_swigregister
constellation_8psk_swigregister(constellation_8psk)

def constellation_8psk_make():
    """constellation_8psk_make() -> gr::digital::constellation_8psk::sptr"""
    return _inets_swig.constellation_8psk_make()

class constellation_8psk_natural(constellation):
    """Proxy of C++ gr::digital::constellation_8psk_natural class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> gr::digital::constellation_8psk_natural::sptr"""
        return _inets_swig.constellation_8psk_natural_make()

    make = staticmethod(make)
    __swig_destroy__ = _inets_swig.delete_constellation_8psk_natural
    __del__ = lambda self: None
constellation_8psk_natural_swigregister = _inets_swig.constellation_8psk_natural_swigregister
constellation_8psk_natural_swigregister(constellation_8psk_natural)

def constellation_8psk_natural_make():
    """constellation_8psk_natural_make() -> gr::digital::constellation_8psk_natural::sptr"""
    return _inets_swig.constellation_8psk_natural_make()

class constellation_16qam(constellation):
    """Proxy of C++ gr::digital::constellation_16qam class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> gr::digital::constellation_16qam::sptr"""
        return _inets_swig.constellation_16qam_make()

    make = staticmethod(make)
    __swig_destroy__ = _inets_swig.delete_constellation_16qam
    __del__ = lambda self: None
constellation_16qam_swigregister = _inets_swig.constellation_16qam_swigregister
constellation_16qam_swigregister(constellation_16qam)

def constellation_16qam_make():
    """constellation_16qam_make() -> gr::digital::constellation_16qam::sptr"""
    return _inets_swig.constellation_16qam_make()

class frame_sync_cc(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """
        make(std::vector< int,std::allocator< int > > const & preamble, gr::digital::constellation_sptr constellation, float threshold, std::string const & len_tag_key) -> frame_sync_cc_sptr

        Return a shared_ptr to a new instance of inets::frame_sync_cc.

        To avoid accidental use of raw pointers, inets::frame_sync_cc's constructor is in a private implementation class. inets::frame_sync_cc::make is the public interface for creating new instances.

        Params: (preamble, constellation, threshold, len_tag_key)
        """
        return _inets_swig.frame_sync_cc_make(*args, **kwargs)

    make = staticmethod(make)

    def set_constellation(self, constellation):
        """
        set_constellation(frame_sync_cc self, gr::digital::constellation_sptr constellation)



        Params: (constellation)
        """
        return _inets_swig.frame_sync_cc_set_constellation(self, constellation)

    __swig_destroy__ = _inets_swig.delete_frame_sync_cc
    __del__ = lambda self: None
frame_sync_cc_swigregister = _inets_swig.frame_sync_cc_swigregister
frame_sync_cc_swigregister(frame_sync_cc)

def frame_sync_cc_make(*args, **kwargs):
    """
    frame_sync_cc_make(std::vector< int,std::allocator< int > > const & preamble, gr::digital::constellation_sptr constellation, float threshold, std::string const & len_tag_key) -> frame_sync_cc_sptr

    Return a shared_ptr to a new instance of inets::frame_sync_cc.

    To avoid accidental use of raw pointers, inets::frame_sync_cc's constructor is in a private implementation class. inets::frame_sync_cc::make is the public interface for creating new instances.

    Params: (preamble, constellation, threshold, len_tag_key)
    """
    return _inets_swig.frame_sync_cc_make(*args, **kwargs)

class frame_sync_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::inets::frame_sync_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::inets::frame_sync_cc)> self) -> frame_sync_cc_sptr
        __init__(boost::shared_ptr<(gr::inets::frame_sync_cc)> self, frame_sync_cc p) -> frame_sync_cc_sptr
        """
        this = _inets_swig.new_frame_sync_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(frame_sync_cc_sptr self) -> frame_sync_cc"""
        return _inets_swig.frame_sync_cc_sptr___deref__(self)

    __swig_destroy__ = _inets_swig.delete_frame_sync_cc_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """
        make(frame_sync_cc_sptr self, std::vector< int,std::allocator< int > > const & preamble, gr::digital::constellation_sptr constellation, float threshold, std::string const & len_tag_key) -> frame_sync_cc_sptr

        Return a shared_ptr to a new instance of inets::frame_sync_cc.

        To avoid accidental use of raw pointers, inets::frame_sync_cc's constructor is in a private implementation class. inets::frame_sync_cc::make is the public interface for creating new instances.

        Params: (preamble, constellation, threshold, len_tag_key)
        """
        return _inets_swig.frame_sync_cc_sptr_make(self, *args, **kwargs)


    def set_constellation(self, constellation):
        """
        set_constellation(frame_sync_cc_sptr self, gr::digital::constellation_sptr constellation)



        Params: (constellation)
        """
        return _inets_swig.frame_sync_cc_sptr_set_constellation(self, constellation)


    def history(self):
        """history(frame_sync_cc_sptr self) -> unsigned int"""
        return _inets_swig.frame_sync_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(frame_sync_cc_sptr self, int which, int delay)
        declare_sample_delay(frame_sync_cc_sptr self, unsigned int delay)
        """
        return _inets_swig.frame_sync_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(frame_sync_cc_sptr self, int which) -> unsigned int"""
        return _inets_swig.frame_sync_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(frame_sync_cc_sptr self) -> int"""
        return _inets_swig.frame_sync_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(frame_sync_cc_sptr self) -> double"""
        return _inets_swig.frame_sync_cc_sptr_relative_rate(self)


    def start(self):
        """start(frame_sync_cc_sptr self) -> bool"""
        return _inets_swig.frame_sync_cc_sptr_start(self)


    def stop(self):
        """stop(frame_sync_cc_sptr self) -> bool"""
        return _inets_swig.frame_sync_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(frame_sync_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _inets_swig.frame_sync_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(frame_sync_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _inets_swig.frame_sync_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(frame_sync_cc_sptr self) -> int"""
        return _inets_swig.frame_sync_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(frame_sync_cc_sptr self, int m)"""
        return _inets_swig.frame_sync_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(frame_sync_cc_sptr self)"""
        return _inets_swig.frame_sync_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(frame_sync_cc_sptr self) -> bool"""
        return _inets_swig.frame_sync_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(frame_sync_cc_sptr self, int m)"""
        return _inets_swig.frame_sync_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(frame_sync_cc_sptr self) -> int"""
        return _inets_swig.frame_sync_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(frame_sync_cc_sptr self, int i) -> long"""
        return _inets_swig.frame_sync_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(frame_sync_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(frame_sync_cc_sptr self, int port, long max_output_buffer)
        """
        return _inets_swig.frame_sync_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(frame_sync_cc_sptr self, int i) -> long"""
        return _inets_swig.frame_sync_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(frame_sync_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(frame_sync_cc_sptr self, int port, long min_output_buffer)
        """
        return _inets_swig.frame_sync_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(frame_sync_cc_sptr self) -> float"""
        return _inets_swig.frame_sync_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(frame_sync_cc_sptr self) -> float"""
        return _inets_swig.frame_sync_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(frame_sync_cc_sptr self) -> float"""
        return _inets_swig.frame_sync_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(frame_sync_cc_sptr self) -> float"""
        return _inets_swig.frame_sync_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(frame_sync_cc_sptr self) -> float"""
        return _inets_swig.frame_sync_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(frame_sync_cc_sptr self) -> float"""
        return _inets_swig.frame_sync_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(frame_sync_cc_sptr self, int which) -> float
        pc_input_buffers_full(frame_sync_cc_sptr self) -> pmt_vector_float
        """
        return _inets_swig.frame_sync_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(frame_sync_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(frame_sync_cc_sptr self) -> pmt_vector_float
        """
        return _inets_swig.frame_sync_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(frame_sync_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(frame_sync_cc_sptr self) -> pmt_vector_float
        """
        return _inets_swig.frame_sync_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(frame_sync_cc_sptr self, int which) -> float
        pc_output_buffers_full(frame_sync_cc_sptr self) -> pmt_vector_float
        """
        return _inets_swig.frame_sync_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(frame_sync_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(frame_sync_cc_sptr self) -> pmt_vector_float
        """
        return _inets_swig.frame_sync_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(frame_sync_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(frame_sync_cc_sptr self) -> pmt_vector_float
        """
        return _inets_swig.frame_sync_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(frame_sync_cc_sptr self) -> float"""
        return _inets_swig.frame_sync_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(frame_sync_cc_sptr self) -> float"""
        return _inets_swig.frame_sync_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(frame_sync_cc_sptr self) -> float"""
        return _inets_swig.frame_sync_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(frame_sync_cc_sptr self) -> float"""
        return _inets_swig.frame_sync_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(frame_sync_cc_sptr self) -> float"""
        return _inets_swig.frame_sync_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(frame_sync_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _inets_swig.frame_sync_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(frame_sync_cc_sptr self)"""
        return _inets_swig.frame_sync_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(frame_sync_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _inets_swig.frame_sync_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(frame_sync_cc_sptr self) -> int"""
        return _inets_swig.frame_sync_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(frame_sync_cc_sptr self) -> int"""
        return _inets_swig.frame_sync_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(frame_sync_cc_sptr self, int priority) -> int"""
        return _inets_swig.frame_sync_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(frame_sync_cc_sptr self) -> std::string"""
        return _inets_swig.frame_sync_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(frame_sync_cc_sptr self) -> std::string"""
        return _inets_swig.frame_sync_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(frame_sync_cc_sptr self) -> io_signature_sptr"""
        return _inets_swig.frame_sync_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(frame_sync_cc_sptr self) -> io_signature_sptr"""
        return _inets_swig.frame_sync_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(frame_sync_cc_sptr self) -> long"""
        return _inets_swig.frame_sync_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(frame_sync_cc_sptr self) -> basic_block_sptr"""
        return _inets_swig.frame_sync_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(frame_sync_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _inets_swig.frame_sync_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(frame_sync_cc_sptr self) -> std::string"""
        return _inets_swig.frame_sync_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(frame_sync_cc_sptr self, std::string name)"""
        return _inets_swig.frame_sync_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(frame_sync_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _inets_swig.frame_sync_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(frame_sync_cc_sptr self) -> swig_int_ptr"""
        return _inets_swig.frame_sync_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(frame_sync_cc_sptr self) -> swig_int_ptr"""
        return _inets_swig.frame_sync_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(frame_sync_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _inets_swig.frame_sync_cc_sptr_message_subscribers(self, which_port)

frame_sync_cc_sptr_swigregister = _inets_swig.frame_sync_cc_sptr_swigregister
frame_sync_cc_sptr_swigregister(frame_sync_cc_sptr)


frame_sync_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
frame_sync_cc = frame_sync_cc.make;

class timing_recovery_cc(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sps):
        """
        make(int sps) -> timing_recovery_cc_sptr

        Return a shared_ptr to a new instance of inets::timing_recovery_cc.

        To avoid accidental use of raw pointers, inets::timing_recovery_cc's constructor is in a private implementation class. inets::timing_recovery_cc::make is the public interface for creating new instances.

        Params: (sps)
        """
        return _inets_swig.timing_recovery_cc_make(sps)

    make = staticmethod(make)
    __swig_destroy__ = _inets_swig.delete_timing_recovery_cc
    __del__ = lambda self: None
timing_recovery_cc_swigregister = _inets_swig.timing_recovery_cc_swigregister
timing_recovery_cc_swigregister(timing_recovery_cc)

def timing_recovery_cc_make(sps):
    """
    timing_recovery_cc_make(int sps) -> timing_recovery_cc_sptr

    Return a shared_ptr to a new instance of inets::timing_recovery_cc.

    To avoid accidental use of raw pointers, inets::timing_recovery_cc's constructor is in a private implementation class. inets::timing_recovery_cc::make is the public interface for creating new instances.

    Params: (sps)
    """
    return _inets_swig.timing_recovery_cc_make(sps)

class timing_recovery_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::inets::timing_recovery_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::inets::timing_recovery_cc)> self) -> timing_recovery_cc_sptr
        __init__(boost::shared_ptr<(gr::inets::timing_recovery_cc)> self, timing_recovery_cc p) -> timing_recovery_cc_sptr
        """
        this = _inets_swig.new_timing_recovery_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(timing_recovery_cc_sptr self) -> timing_recovery_cc"""
        return _inets_swig.timing_recovery_cc_sptr___deref__(self)

    __swig_destroy__ = _inets_swig.delete_timing_recovery_cc_sptr
    __del__ = lambda self: None

    def make(self, sps):
        """
        make(timing_recovery_cc_sptr self, int sps) -> timing_recovery_cc_sptr

        Return a shared_ptr to a new instance of inets::timing_recovery_cc.

        To avoid accidental use of raw pointers, inets::timing_recovery_cc's constructor is in a private implementation class. inets::timing_recovery_cc::make is the public interface for creating new instances.

        Params: (sps)
        """
        return _inets_swig.timing_recovery_cc_sptr_make(self, sps)


    def history(self):
        """history(timing_recovery_cc_sptr self) -> unsigned int"""
        return _inets_swig.timing_recovery_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(timing_recovery_cc_sptr self, int which, int delay)
        declare_sample_delay(timing_recovery_cc_sptr self, unsigned int delay)
        """
        return _inets_swig.timing_recovery_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(timing_recovery_cc_sptr self, int which) -> unsigned int"""
        return _inets_swig.timing_recovery_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(timing_recovery_cc_sptr self) -> int"""
        return _inets_swig.timing_recovery_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(timing_recovery_cc_sptr self) -> double"""
        return _inets_swig.timing_recovery_cc_sptr_relative_rate(self)


    def start(self):
        """start(timing_recovery_cc_sptr self) -> bool"""
        return _inets_swig.timing_recovery_cc_sptr_start(self)


    def stop(self):
        """stop(timing_recovery_cc_sptr self) -> bool"""
        return _inets_swig.timing_recovery_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(timing_recovery_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _inets_swig.timing_recovery_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(timing_recovery_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _inets_swig.timing_recovery_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(timing_recovery_cc_sptr self) -> int"""
        return _inets_swig.timing_recovery_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(timing_recovery_cc_sptr self, int m)"""
        return _inets_swig.timing_recovery_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(timing_recovery_cc_sptr self)"""
        return _inets_swig.timing_recovery_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(timing_recovery_cc_sptr self) -> bool"""
        return _inets_swig.timing_recovery_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(timing_recovery_cc_sptr self, int m)"""
        return _inets_swig.timing_recovery_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(timing_recovery_cc_sptr self) -> int"""
        return _inets_swig.timing_recovery_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(timing_recovery_cc_sptr self, int i) -> long"""
        return _inets_swig.timing_recovery_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(timing_recovery_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(timing_recovery_cc_sptr self, int port, long max_output_buffer)
        """
        return _inets_swig.timing_recovery_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(timing_recovery_cc_sptr self, int i) -> long"""
        return _inets_swig.timing_recovery_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(timing_recovery_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(timing_recovery_cc_sptr self, int port, long min_output_buffer)
        """
        return _inets_swig.timing_recovery_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(timing_recovery_cc_sptr self) -> float"""
        return _inets_swig.timing_recovery_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(timing_recovery_cc_sptr self) -> float"""
        return _inets_swig.timing_recovery_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(timing_recovery_cc_sptr self) -> float"""
        return _inets_swig.timing_recovery_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(timing_recovery_cc_sptr self) -> float"""
        return _inets_swig.timing_recovery_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(timing_recovery_cc_sptr self) -> float"""
        return _inets_swig.timing_recovery_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(timing_recovery_cc_sptr self) -> float"""
        return _inets_swig.timing_recovery_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(timing_recovery_cc_sptr self, int which) -> float
        pc_input_buffers_full(timing_recovery_cc_sptr self) -> pmt_vector_float
        """
        return _inets_swig.timing_recovery_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(timing_recovery_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(timing_recovery_cc_sptr self) -> pmt_vector_float
        """
        return _inets_swig.timing_recovery_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(timing_recovery_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(timing_recovery_cc_sptr self) -> pmt_vector_float
        """
        return _inets_swig.timing_recovery_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(timing_recovery_cc_sptr self, int which) -> float
        pc_output_buffers_full(timing_recovery_cc_sptr self) -> pmt_vector_float
        """
        return _inets_swig.timing_recovery_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(timing_recovery_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(timing_recovery_cc_sptr self) -> pmt_vector_float
        """
        return _inets_swig.timing_recovery_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(timing_recovery_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(timing_recovery_cc_sptr self) -> pmt_vector_float
        """
        return _inets_swig.timing_recovery_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(timing_recovery_cc_sptr self) -> float"""
        return _inets_swig.timing_recovery_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(timing_recovery_cc_sptr self) -> float"""
        return _inets_swig.timing_recovery_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(timing_recovery_cc_sptr self) -> float"""
        return _inets_swig.timing_recovery_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(timing_recovery_cc_sptr self) -> float"""
        return _inets_swig.timing_recovery_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(timing_recovery_cc_sptr self) -> float"""
        return _inets_swig.timing_recovery_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(timing_recovery_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _inets_swig.timing_recovery_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(timing_recovery_cc_sptr self)"""
        return _inets_swig.timing_recovery_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(timing_recovery_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _inets_swig.timing_recovery_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(timing_recovery_cc_sptr self) -> int"""
        return _inets_swig.timing_recovery_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(timing_recovery_cc_sptr self) -> int"""
        return _inets_swig.timing_recovery_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(timing_recovery_cc_sptr self, int priority) -> int"""
        return _inets_swig.timing_recovery_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(timing_recovery_cc_sptr self) -> std::string"""
        return _inets_swig.timing_recovery_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(timing_recovery_cc_sptr self) -> std::string"""
        return _inets_swig.timing_recovery_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(timing_recovery_cc_sptr self) -> io_signature_sptr"""
        return _inets_swig.timing_recovery_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(timing_recovery_cc_sptr self) -> io_signature_sptr"""
        return _inets_swig.timing_recovery_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(timing_recovery_cc_sptr self) -> long"""
        return _inets_swig.timing_recovery_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(timing_recovery_cc_sptr self) -> basic_block_sptr"""
        return _inets_swig.timing_recovery_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(timing_recovery_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _inets_swig.timing_recovery_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(timing_recovery_cc_sptr self) -> std::string"""
        return _inets_swig.timing_recovery_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(timing_recovery_cc_sptr self, std::string name)"""
        return _inets_swig.timing_recovery_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(timing_recovery_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _inets_swig.timing_recovery_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(timing_recovery_cc_sptr self) -> swig_int_ptr"""
        return _inets_swig.timing_recovery_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(timing_recovery_cc_sptr self) -> swig_int_ptr"""
        return _inets_swig.timing_recovery_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(timing_recovery_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _inets_swig.timing_recovery_cc_sptr_message_subscribers(self, which_port)

timing_recovery_cc_sptr_swigregister = _inets_swig.timing_recovery_cc_sptr_swigregister
timing_recovery_cc_sptr_swigregister(timing_recovery_cc_sptr)


timing_recovery_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
timing_recovery_cc = timing_recovery_cc.make;

class packetizer(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(preamble, padding, bps):
        """
        make(std::vector< unsigned char,std::allocator< unsigned char > > const & preamble, int padding, double bps) -> packetizer_sptr

        Return a shared_ptr to a new instance of inets::packetizer.

        To avoid accidental use of raw pointers, inets::packetizer's constructor is in a private implementation class. inets::packetizer::make is the public interface for creating new instances.

        Params: (preamble, padding, bps)
        """
        return _inets_swig.packetizer_make(preamble, padding, bps)

    make = staticmethod(make)
    __swig_destroy__ = _inets_swig.delete_packetizer
    __del__ = lambda self: None
packetizer_swigregister = _inets_swig.packetizer_swigregister
packetizer_swigregister(packetizer)

def packetizer_make(preamble, padding, bps):
    """
    packetizer_make(std::vector< unsigned char,std::allocator< unsigned char > > const & preamble, int padding, double bps) -> packetizer_sptr

    Return a shared_ptr to a new instance of inets::packetizer.

    To avoid accidental use of raw pointers, inets::packetizer's constructor is in a private implementation class. inets::packetizer::make is the public interface for creating new instances.

    Params: (preamble, padding, bps)
    """
    return _inets_swig.packetizer_make(preamble, padding, bps)

class packetizer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::inets::packetizer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::inets::packetizer)> self) -> packetizer_sptr
        __init__(boost::shared_ptr<(gr::inets::packetizer)> self, packetizer p) -> packetizer_sptr
        """
        this = _inets_swig.new_packetizer_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(packetizer_sptr self) -> packetizer"""
        return _inets_swig.packetizer_sptr___deref__(self)

    __swig_destroy__ = _inets_swig.delete_packetizer_sptr
    __del__ = lambda self: None

    def make(self, preamble, padding, bps):
        """
        make(packetizer_sptr self, std::vector< unsigned char,std::allocator< unsigned char > > const & preamble, int padding, double bps) -> packetizer_sptr

        Return a shared_ptr to a new instance of inets::packetizer.

        To avoid accidental use of raw pointers, inets::packetizer's constructor is in a private implementation class. inets::packetizer::make is the public interface for creating new instances.

        Params: (preamble, padding, bps)
        """
        return _inets_swig.packetizer_sptr_make(self, preamble, padding, bps)


    def history(self):
        """history(packetizer_sptr self) -> unsigned int"""
        return _inets_swig.packetizer_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(packetizer_sptr self, int which, int delay)
        declare_sample_delay(packetizer_sptr self, unsigned int delay)
        """
        return _inets_swig.packetizer_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(packetizer_sptr self, int which) -> unsigned int"""
        return _inets_swig.packetizer_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(packetizer_sptr self) -> int"""
        return _inets_swig.packetizer_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(packetizer_sptr self) -> double"""
        return _inets_swig.packetizer_sptr_relative_rate(self)


    def start(self):
        """start(packetizer_sptr self) -> bool"""
        return _inets_swig.packetizer_sptr_start(self)


    def stop(self):
        """stop(packetizer_sptr self) -> bool"""
        return _inets_swig.packetizer_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(packetizer_sptr self, unsigned int which_input) -> uint64_t"""
        return _inets_swig.packetizer_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(packetizer_sptr self, unsigned int which_output) -> uint64_t"""
        return _inets_swig.packetizer_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(packetizer_sptr self) -> int"""
        return _inets_swig.packetizer_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(packetizer_sptr self, int m)"""
        return _inets_swig.packetizer_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(packetizer_sptr self)"""
        return _inets_swig.packetizer_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(packetizer_sptr self) -> bool"""
        return _inets_swig.packetizer_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(packetizer_sptr self, int m)"""
        return _inets_swig.packetizer_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(packetizer_sptr self) -> int"""
        return _inets_swig.packetizer_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(packetizer_sptr self, int i) -> long"""
        return _inets_swig.packetizer_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(packetizer_sptr self, long max_output_buffer)
        set_max_output_buffer(packetizer_sptr self, int port, long max_output_buffer)
        """
        return _inets_swig.packetizer_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(packetizer_sptr self, int i) -> long"""
        return _inets_swig.packetizer_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(packetizer_sptr self, long min_output_buffer)
        set_min_output_buffer(packetizer_sptr self, int port, long min_output_buffer)
        """
        return _inets_swig.packetizer_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(packetizer_sptr self) -> float"""
        return _inets_swig.packetizer_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(packetizer_sptr self) -> float"""
        return _inets_swig.packetizer_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(packetizer_sptr self) -> float"""
        return _inets_swig.packetizer_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(packetizer_sptr self) -> float"""
        return _inets_swig.packetizer_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(packetizer_sptr self) -> float"""
        return _inets_swig.packetizer_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(packetizer_sptr self) -> float"""
        return _inets_swig.packetizer_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(packetizer_sptr self, int which) -> float
        pc_input_buffers_full(packetizer_sptr self) -> pmt_vector_float
        """
        return _inets_swig.packetizer_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(packetizer_sptr self, int which) -> float
        pc_input_buffers_full_avg(packetizer_sptr self) -> pmt_vector_float
        """
        return _inets_swig.packetizer_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(packetizer_sptr self, int which) -> float
        pc_input_buffers_full_var(packetizer_sptr self) -> pmt_vector_float
        """
        return _inets_swig.packetizer_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(packetizer_sptr self, int which) -> float
        pc_output_buffers_full(packetizer_sptr self) -> pmt_vector_float
        """
        return _inets_swig.packetizer_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(packetizer_sptr self, int which) -> float
        pc_output_buffers_full_avg(packetizer_sptr self) -> pmt_vector_float
        """
        return _inets_swig.packetizer_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(packetizer_sptr self, int which) -> float
        pc_output_buffers_full_var(packetizer_sptr self) -> pmt_vector_float
        """
        return _inets_swig.packetizer_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(packetizer_sptr self) -> float"""
        return _inets_swig.packetizer_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(packetizer_sptr self) -> float"""
        return _inets_swig.packetizer_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(packetizer_sptr self) -> float"""
        return _inets_swig.packetizer_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(packetizer_sptr self) -> float"""
        return _inets_swig.packetizer_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(packetizer_sptr self) -> float"""
        return _inets_swig.packetizer_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(packetizer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _inets_swig.packetizer_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(packetizer_sptr self)"""
        return _inets_swig.packetizer_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(packetizer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _inets_swig.packetizer_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(packetizer_sptr self) -> int"""
        return _inets_swig.packetizer_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(packetizer_sptr self) -> int"""
        return _inets_swig.packetizer_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(packetizer_sptr self, int priority) -> int"""
        return _inets_swig.packetizer_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(packetizer_sptr self) -> std::string"""
        return _inets_swig.packetizer_sptr_name(self)


    def symbol_name(self):
        """symbol_name(packetizer_sptr self) -> std::string"""
        return _inets_swig.packetizer_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(packetizer_sptr self) -> io_signature_sptr"""
        return _inets_swig.packetizer_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(packetizer_sptr self) -> io_signature_sptr"""
        return _inets_swig.packetizer_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(packetizer_sptr self) -> long"""
        return _inets_swig.packetizer_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(packetizer_sptr self) -> basic_block_sptr"""
        return _inets_swig.packetizer_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(packetizer_sptr self, int ninputs, int noutputs) -> bool"""
        return _inets_swig.packetizer_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(packetizer_sptr self) -> std::string"""
        return _inets_swig.packetizer_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(packetizer_sptr self, std::string name)"""
        return _inets_swig.packetizer_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(packetizer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _inets_swig.packetizer_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(packetizer_sptr self) -> swig_int_ptr"""
        return _inets_swig.packetizer_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(packetizer_sptr self) -> swig_int_ptr"""
        return _inets_swig.packetizer_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(packetizer_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _inets_swig.packetizer_sptr_message_subscribers(self, which_port)

packetizer_sptr_swigregister = _inets_swig.packetizer_sptr_swigregister
packetizer_sptr_swigregister(packetizer_sptr)


packetizer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packetizer = packetizer.make;

class variable_rotator(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(num_delay):
        """
        make(int num_delay) -> variable_rotator_sptr

        Return a shared_ptr to a new instance of inets::variable_rotator.

        To avoid accidental use of raw pointers, inets::variable_rotator's constructor is in a private implementation class. inets::variable_rotator::make is the public interface for creating new instances.

        Params: (num_delay)
        """
        return _inets_swig.variable_rotator_make(num_delay)

    make = staticmethod(make)
    __swig_destroy__ = _inets_swig.delete_variable_rotator
    __del__ = lambda self: None
variable_rotator_swigregister = _inets_swig.variable_rotator_swigregister
variable_rotator_swigregister(variable_rotator)

def variable_rotator_make(num_delay):
    """
    variable_rotator_make(int num_delay) -> variable_rotator_sptr

    Return a shared_ptr to a new instance of inets::variable_rotator.

    To avoid accidental use of raw pointers, inets::variable_rotator's constructor is in a private implementation class. inets::variable_rotator::make is the public interface for creating new instances.

    Params: (num_delay)
    """
    return _inets_swig.variable_rotator_make(num_delay)

class variable_rotator_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::inets::variable_rotator)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::inets::variable_rotator)> self) -> variable_rotator_sptr
        __init__(boost::shared_ptr<(gr::inets::variable_rotator)> self, variable_rotator p) -> variable_rotator_sptr
        """
        this = _inets_swig.new_variable_rotator_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(variable_rotator_sptr self) -> variable_rotator"""
        return _inets_swig.variable_rotator_sptr___deref__(self)

    __swig_destroy__ = _inets_swig.delete_variable_rotator_sptr
    __del__ = lambda self: None

    def make(self, num_delay):
        """
        make(variable_rotator_sptr self, int num_delay) -> variable_rotator_sptr

        Return a shared_ptr to a new instance of inets::variable_rotator.

        To avoid accidental use of raw pointers, inets::variable_rotator's constructor is in a private implementation class. inets::variable_rotator::make is the public interface for creating new instances.

        Params: (num_delay)
        """
        return _inets_swig.variable_rotator_sptr_make(self, num_delay)


    def history(self):
        """history(variable_rotator_sptr self) -> unsigned int"""
        return _inets_swig.variable_rotator_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(variable_rotator_sptr self, int which, int delay)
        declare_sample_delay(variable_rotator_sptr self, unsigned int delay)
        """
        return _inets_swig.variable_rotator_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(variable_rotator_sptr self, int which) -> unsigned int"""
        return _inets_swig.variable_rotator_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(variable_rotator_sptr self) -> int"""
        return _inets_swig.variable_rotator_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(variable_rotator_sptr self) -> double"""
        return _inets_swig.variable_rotator_sptr_relative_rate(self)


    def start(self):
        """start(variable_rotator_sptr self) -> bool"""
        return _inets_swig.variable_rotator_sptr_start(self)


    def stop(self):
        """stop(variable_rotator_sptr self) -> bool"""
        return _inets_swig.variable_rotator_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(variable_rotator_sptr self, unsigned int which_input) -> uint64_t"""
        return _inets_swig.variable_rotator_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(variable_rotator_sptr self, unsigned int which_output) -> uint64_t"""
        return _inets_swig.variable_rotator_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(variable_rotator_sptr self) -> int"""
        return _inets_swig.variable_rotator_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(variable_rotator_sptr self, int m)"""
        return _inets_swig.variable_rotator_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(variable_rotator_sptr self)"""
        return _inets_swig.variable_rotator_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(variable_rotator_sptr self) -> bool"""
        return _inets_swig.variable_rotator_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(variable_rotator_sptr self, int m)"""
        return _inets_swig.variable_rotator_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(variable_rotator_sptr self) -> int"""
        return _inets_swig.variable_rotator_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(variable_rotator_sptr self, int i) -> long"""
        return _inets_swig.variable_rotator_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(variable_rotator_sptr self, long max_output_buffer)
        set_max_output_buffer(variable_rotator_sptr self, int port, long max_output_buffer)
        """
        return _inets_swig.variable_rotator_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(variable_rotator_sptr self, int i) -> long"""
        return _inets_swig.variable_rotator_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(variable_rotator_sptr self, long min_output_buffer)
        set_min_output_buffer(variable_rotator_sptr self, int port, long min_output_buffer)
        """
        return _inets_swig.variable_rotator_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(variable_rotator_sptr self) -> float"""
        return _inets_swig.variable_rotator_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(variable_rotator_sptr self) -> float"""
        return _inets_swig.variable_rotator_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(variable_rotator_sptr self) -> float"""
        return _inets_swig.variable_rotator_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(variable_rotator_sptr self) -> float"""
        return _inets_swig.variable_rotator_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(variable_rotator_sptr self) -> float"""
        return _inets_swig.variable_rotator_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(variable_rotator_sptr self) -> float"""
        return _inets_swig.variable_rotator_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(variable_rotator_sptr self, int which) -> float
        pc_input_buffers_full(variable_rotator_sptr self) -> pmt_vector_float
        """
        return _inets_swig.variable_rotator_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(variable_rotator_sptr self, int which) -> float
        pc_input_buffers_full_avg(variable_rotator_sptr self) -> pmt_vector_float
        """
        return _inets_swig.variable_rotator_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(variable_rotator_sptr self, int which) -> float
        pc_input_buffers_full_var(variable_rotator_sptr self) -> pmt_vector_float
        """
        return _inets_swig.variable_rotator_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(variable_rotator_sptr self, int which) -> float
        pc_output_buffers_full(variable_rotator_sptr self) -> pmt_vector_float
        """
        return _inets_swig.variable_rotator_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(variable_rotator_sptr self, int which) -> float
        pc_output_buffers_full_avg(variable_rotator_sptr self) -> pmt_vector_float
        """
        return _inets_swig.variable_rotator_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(variable_rotator_sptr self, int which) -> float
        pc_output_buffers_full_var(variable_rotator_sptr self) -> pmt_vector_float
        """
        return _inets_swig.variable_rotator_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(variable_rotator_sptr self) -> float"""
        return _inets_swig.variable_rotator_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(variable_rotator_sptr self) -> float"""
        return _inets_swig.variable_rotator_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(variable_rotator_sptr self) -> float"""
        return _inets_swig.variable_rotator_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(variable_rotator_sptr self) -> float"""
        return _inets_swig.variable_rotator_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(variable_rotator_sptr self) -> float"""
        return _inets_swig.variable_rotator_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(variable_rotator_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _inets_swig.variable_rotator_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(variable_rotator_sptr self)"""
        return _inets_swig.variable_rotator_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(variable_rotator_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _inets_swig.variable_rotator_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(variable_rotator_sptr self) -> int"""
        return _inets_swig.variable_rotator_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(variable_rotator_sptr self) -> int"""
        return _inets_swig.variable_rotator_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(variable_rotator_sptr self, int priority) -> int"""
        return _inets_swig.variable_rotator_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(variable_rotator_sptr self) -> std::string"""
        return _inets_swig.variable_rotator_sptr_name(self)


    def symbol_name(self):
        """symbol_name(variable_rotator_sptr self) -> std::string"""
        return _inets_swig.variable_rotator_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(variable_rotator_sptr self) -> io_signature_sptr"""
        return _inets_swig.variable_rotator_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(variable_rotator_sptr self) -> io_signature_sptr"""
        return _inets_swig.variable_rotator_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(variable_rotator_sptr self) -> long"""
        return _inets_swig.variable_rotator_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(variable_rotator_sptr self) -> basic_block_sptr"""
        return _inets_swig.variable_rotator_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(variable_rotator_sptr self, int ninputs, int noutputs) -> bool"""
        return _inets_swig.variable_rotator_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(variable_rotator_sptr self) -> std::string"""
        return _inets_swig.variable_rotator_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(variable_rotator_sptr self, std::string name)"""
        return _inets_swig.variable_rotator_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(variable_rotator_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _inets_swig.variable_rotator_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(variable_rotator_sptr self) -> swig_int_ptr"""
        return _inets_swig.variable_rotator_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(variable_rotator_sptr self) -> swig_int_ptr"""
        return _inets_swig.variable_rotator_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(variable_rotator_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _inets_swig.variable_rotator_sptr_message_subscribers(self, which_port)

variable_rotator_sptr_swigregister = _inets_swig.variable_rotator_sptr_swigregister
variable_rotator_sptr_swigregister(variable_rotator_sptr)


variable_rotator_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
variable_rotator = variable_rotator.make;

class baseband_derotation(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(mu, con):
        """
        make(float mu, gr::digital::constellation_sptr con) -> baseband_derotation_sptr

        Return a shared_ptr to a new instance of inets::baseband_derotation.

        To avoid accidental use of raw pointers, inets::baseband_derotation's constructor is in a private implementation class. inets::baseband_derotation::make is the public interface for creating new instances.

        Params: (mu, con)
        """
        return _inets_swig.baseband_derotation_make(mu, con)

    make = staticmethod(make)

    def set_mu(self, mu):
        """
        set_mu(baseband_derotation self, float mu)



        Params: (mu)
        """
        return _inets_swig.baseband_derotation_set_mu(self, mu)


    def mu(self):
        """
        mu(baseband_derotation self) -> float



        Params: (NONE)
        """
        return _inets_swig.baseband_derotation_mu(self)

    __swig_destroy__ = _inets_swig.delete_baseband_derotation
    __del__ = lambda self: None
baseband_derotation_swigregister = _inets_swig.baseband_derotation_swigregister
baseband_derotation_swigregister(baseband_derotation)

def baseband_derotation_make(mu, con):
    """
    baseband_derotation_make(float mu, gr::digital::constellation_sptr con) -> baseband_derotation_sptr

    Return a shared_ptr to a new instance of inets::baseband_derotation.

    To avoid accidental use of raw pointers, inets::baseband_derotation's constructor is in a private implementation class. inets::baseband_derotation::make is the public interface for creating new instances.

    Params: (mu, con)
    """
    return _inets_swig.baseband_derotation_make(mu, con)

class baseband_derotation_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::inets::baseband_derotation)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::inets::baseband_derotation)> self) -> baseband_derotation_sptr
        __init__(boost::shared_ptr<(gr::inets::baseband_derotation)> self, baseband_derotation p) -> baseband_derotation_sptr
        """
        this = _inets_swig.new_baseband_derotation_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(baseband_derotation_sptr self) -> baseband_derotation"""
        return _inets_swig.baseband_derotation_sptr___deref__(self)

    __swig_destroy__ = _inets_swig.delete_baseband_derotation_sptr
    __del__ = lambda self: None

    def make(self, mu, con):
        """
        make(baseband_derotation_sptr self, float mu, gr::digital::constellation_sptr con) -> baseband_derotation_sptr

        Return a shared_ptr to a new instance of inets::baseband_derotation.

        To avoid accidental use of raw pointers, inets::baseband_derotation's constructor is in a private implementation class. inets::baseband_derotation::make is the public interface for creating new instances.

        Params: (mu, con)
        """
        return _inets_swig.baseband_derotation_sptr_make(self, mu, con)


    def set_mu(self, mu):
        """
        set_mu(baseband_derotation_sptr self, float mu)



        Params: (mu)
        """
        return _inets_swig.baseband_derotation_sptr_set_mu(self, mu)


    def mu(self):
        """
        mu(baseband_derotation_sptr self) -> float



        Params: (NONE)
        """
        return _inets_swig.baseband_derotation_sptr_mu(self)


    def history(self):
        """history(baseband_derotation_sptr self) -> unsigned int"""
        return _inets_swig.baseband_derotation_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(baseband_derotation_sptr self, int which, int delay)
        declare_sample_delay(baseband_derotation_sptr self, unsigned int delay)
        """
        return _inets_swig.baseband_derotation_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(baseband_derotation_sptr self, int which) -> unsigned int"""
        return _inets_swig.baseband_derotation_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(baseband_derotation_sptr self) -> int"""
        return _inets_swig.baseband_derotation_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(baseband_derotation_sptr self) -> double"""
        return _inets_swig.baseband_derotation_sptr_relative_rate(self)


    def start(self):
        """start(baseband_derotation_sptr self) -> bool"""
        return _inets_swig.baseband_derotation_sptr_start(self)


    def stop(self):
        """stop(baseband_derotation_sptr self) -> bool"""
        return _inets_swig.baseband_derotation_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(baseband_derotation_sptr self, unsigned int which_input) -> uint64_t"""
        return _inets_swig.baseband_derotation_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(baseband_derotation_sptr self, unsigned int which_output) -> uint64_t"""
        return _inets_swig.baseband_derotation_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(baseband_derotation_sptr self) -> int"""
        return _inets_swig.baseband_derotation_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(baseband_derotation_sptr self, int m)"""
        return _inets_swig.baseband_derotation_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(baseband_derotation_sptr self)"""
        return _inets_swig.baseband_derotation_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(baseband_derotation_sptr self) -> bool"""
        return _inets_swig.baseband_derotation_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(baseband_derotation_sptr self, int m)"""
        return _inets_swig.baseband_derotation_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(baseband_derotation_sptr self) -> int"""
        return _inets_swig.baseband_derotation_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(baseband_derotation_sptr self, int i) -> long"""
        return _inets_swig.baseband_derotation_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(baseband_derotation_sptr self, long max_output_buffer)
        set_max_output_buffer(baseband_derotation_sptr self, int port, long max_output_buffer)
        """
        return _inets_swig.baseband_derotation_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(baseband_derotation_sptr self, int i) -> long"""
        return _inets_swig.baseband_derotation_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(baseband_derotation_sptr self, long min_output_buffer)
        set_min_output_buffer(baseband_derotation_sptr self, int port, long min_output_buffer)
        """
        return _inets_swig.baseband_derotation_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(baseband_derotation_sptr self) -> float"""
        return _inets_swig.baseband_derotation_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(baseband_derotation_sptr self) -> float"""
        return _inets_swig.baseband_derotation_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(baseband_derotation_sptr self) -> float"""
        return _inets_swig.baseband_derotation_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(baseband_derotation_sptr self) -> float"""
        return _inets_swig.baseband_derotation_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(baseband_derotation_sptr self) -> float"""
        return _inets_swig.baseband_derotation_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(baseband_derotation_sptr self) -> float"""
        return _inets_swig.baseband_derotation_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(baseband_derotation_sptr self, int which) -> float
        pc_input_buffers_full(baseband_derotation_sptr self) -> pmt_vector_float
        """
        return _inets_swig.baseband_derotation_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(baseband_derotation_sptr self, int which) -> float
        pc_input_buffers_full_avg(baseband_derotation_sptr self) -> pmt_vector_float
        """
        return _inets_swig.baseband_derotation_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(baseband_derotation_sptr self, int which) -> float
        pc_input_buffers_full_var(baseband_derotation_sptr self) -> pmt_vector_float
        """
        return _inets_swig.baseband_derotation_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(baseband_derotation_sptr self, int which) -> float
        pc_output_buffers_full(baseband_derotation_sptr self) -> pmt_vector_float
        """
        return _inets_swig.baseband_derotation_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(baseband_derotation_sptr self, int which) -> float
        pc_output_buffers_full_avg(baseband_derotation_sptr self) -> pmt_vector_float
        """
        return _inets_swig.baseband_derotation_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(baseband_derotation_sptr self, int which) -> float
        pc_output_buffers_full_var(baseband_derotation_sptr self) -> pmt_vector_float
        """
        return _inets_swig.baseband_derotation_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(baseband_derotation_sptr self) -> float"""
        return _inets_swig.baseband_derotation_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(baseband_derotation_sptr self) -> float"""
        return _inets_swig.baseband_derotation_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(baseband_derotation_sptr self) -> float"""
        return _inets_swig.baseband_derotation_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(baseband_derotation_sptr self) -> float"""
        return _inets_swig.baseband_derotation_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(baseband_derotation_sptr self) -> float"""
        return _inets_swig.baseband_derotation_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(baseband_derotation_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _inets_swig.baseband_derotation_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(baseband_derotation_sptr self)"""
        return _inets_swig.baseband_derotation_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(baseband_derotation_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _inets_swig.baseband_derotation_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(baseband_derotation_sptr self) -> int"""
        return _inets_swig.baseband_derotation_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(baseband_derotation_sptr self) -> int"""
        return _inets_swig.baseband_derotation_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(baseband_derotation_sptr self, int priority) -> int"""
        return _inets_swig.baseband_derotation_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(baseband_derotation_sptr self) -> std::string"""
        return _inets_swig.baseband_derotation_sptr_name(self)


    def symbol_name(self):
        """symbol_name(baseband_derotation_sptr self) -> std::string"""
        return _inets_swig.baseband_derotation_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(baseband_derotation_sptr self) -> io_signature_sptr"""
        return _inets_swig.baseband_derotation_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(baseband_derotation_sptr self) -> io_signature_sptr"""
        return _inets_swig.baseband_derotation_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(baseband_derotation_sptr self) -> long"""
        return _inets_swig.baseband_derotation_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(baseband_derotation_sptr self) -> basic_block_sptr"""
        return _inets_swig.baseband_derotation_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(baseband_derotation_sptr self, int ninputs, int noutputs) -> bool"""
        return _inets_swig.baseband_derotation_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(baseband_derotation_sptr self) -> std::string"""
        return _inets_swig.baseband_derotation_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(baseband_derotation_sptr self, std::string name)"""
        return _inets_swig.baseband_derotation_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(baseband_derotation_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _inets_swig.baseband_derotation_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(baseband_derotation_sptr self) -> swig_int_ptr"""
        return _inets_swig.baseband_derotation_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(baseband_derotation_sptr self) -> swig_int_ptr"""
        return _inets_swig.baseband_derotation_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(baseband_derotation_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _inets_swig.baseband_derotation_sptr_message_subscribers(self, which_port)

baseband_derotation_sptr_swigregister = _inets_swig.baseband_derotation_sptr_swigregister
baseband_derotation_sptr_swigregister(baseband_derotation_sptr)


baseband_derotation_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
baseband_derotation = baseband_derotation.make;

class rssi(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(alpha, th_low_db, num_samp_idle_det):
        """
        make(float alpha, float th_low_db, int num_samp_idle_det) -> rssi_sptr

        Return a shared_ptr to a new instance of inets::rssi.

        To avoid accidental use of raw pointers, inets::rssi's constructor is in a private implementation class. inets::rssi::make is the public interface for creating new instances.

        Params: (alpha, th_low_db, num_samp_idle_det)
        """
        return _inets_swig.rssi_make(alpha, th_low_db, num_samp_idle_det)

    make = staticmethod(make)

    def reset(self):
        """
        reset(rssi self)



        Params: (NONE)
        """
        return _inets_swig.rssi_reset(self)


    def set_alpha(self, a):
        """
        set_alpha(rssi self, float a)



        Params: (a)
        """
        return _inets_swig.rssi_set_alpha(self, a)


    def get_pow_data(self):
        """
        get_pow_data(rssi self) -> double



        Params: (NONE)
        """
        return _inets_swig.rssi_get_pow_data(self)


    def get_pow(self):
        """
        get_pow(rssi self) -> double



        Params: (NONE)
        """
        return _inets_swig.rssi_get_pow(self)


    def get_last_sample_count(self):
        """
        get_last_sample_count(rssi self) -> int



        Params: (NONE)
        """
        return _inets_swig.rssi_get_last_sample_count(self)

    __swig_destroy__ = _inets_swig.delete_rssi
    __del__ = lambda self: None
rssi_swigregister = _inets_swig.rssi_swigregister
rssi_swigregister(rssi)

def rssi_make(alpha, th_low_db, num_samp_idle_det):
    """
    rssi_make(float alpha, float th_low_db, int num_samp_idle_det) -> rssi_sptr

    Return a shared_ptr to a new instance of inets::rssi.

    To avoid accidental use of raw pointers, inets::rssi's constructor is in a private implementation class. inets::rssi::make is the public interface for creating new instances.

    Params: (alpha, th_low_db, num_samp_idle_det)
    """
    return _inets_swig.rssi_make(alpha, th_low_db, num_samp_idle_det)

class rssi_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::inets::rssi)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::inets::rssi)> self) -> rssi_sptr
        __init__(boost::shared_ptr<(gr::inets::rssi)> self, rssi p) -> rssi_sptr
        """
        this = _inets_swig.new_rssi_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(rssi_sptr self) -> rssi"""
        return _inets_swig.rssi_sptr___deref__(self)

    __swig_destroy__ = _inets_swig.delete_rssi_sptr
    __del__ = lambda self: None

    def make(self, alpha, th_low_db, num_samp_idle_det):
        """
        make(rssi_sptr self, float alpha, float th_low_db, int num_samp_idle_det) -> rssi_sptr

        Return a shared_ptr to a new instance of inets::rssi.

        To avoid accidental use of raw pointers, inets::rssi's constructor is in a private implementation class. inets::rssi::make is the public interface for creating new instances.

        Params: (alpha, th_low_db, num_samp_idle_det)
        """
        return _inets_swig.rssi_sptr_make(self, alpha, th_low_db, num_samp_idle_det)


    def reset(self):
        """
        reset(rssi_sptr self)



        Params: (NONE)
        """
        return _inets_swig.rssi_sptr_reset(self)


    def set_alpha(self, a):
        """
        set_alpha(rssi_sptr self, float a)



        Params: (a)
        """
        return _inets_swig.rssi_sptr_set_alpha(self, a)


    def get_pow_data(self):
        """
        get_pow_data(rssi_sptr self) -> double



        Params: (NONE)
        """
        return _inets_swig.rssi_sptr_get_pow_data(self)


    def get_pow(self):
        """
        get_pow(rssi_sptr self) -> double



        Params: (NONE)
        """
        return _inets_swig.rssi_sptr_get_pow(self)


    def get_last_sample_count(self):
        """
        get_last_sample_count(rssi_sptr self) -> int



        Params: (NONE)
        """
        return _inets_swig.rssi_sptr_get_last_sample_count(self)


    def history(self):
        """history(rssi_sptr self) -> unsigned int"""
        return _inets_swig.rssi_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(rssi_sptr self, int which, int delay)
        declare_sample_delay(rssi_sptr self, unsigned int delay)
        """
        return _inets_swig.rssi_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(rssi_sptr self, int which) -> unsigned int"""
        return _inets_swig.rssi_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(rssi_sptr self) -> int"""
        return _inets_swig.rssi_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(rssi_sptr self) -> double"""
        return _inets_swig.rssi_sptr_relative_rate(self)


    def start(self):
        """start(rssi_sptr self) -> bool"""
        return _inets_swig.rssi_sptr_start(self)


    def stop(self):
        """stop(rssi_sptr self) -> bool"""
        return _inets_swig.rssi_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(rssi_sptr self, unsigned int which_input) -> uint64_t"""
        return _inets_swig.rssi_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(rssi_sptr self, unsigned int which_output) -> uint64_t"""
        return _inets_swig.rssi_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(rssi_sptr self) -> int"""
        return _inets_swig.rssi_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(rssi_sptr self, int m)"""
        return _inets_swig.rssi_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(rssi_sptr self)"""
        return _inets_swig.rssi_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(rssi_sptr self) -> bool"""
        return _inets_swig.rssi_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(rssi_sptr self, int m)"""
        return _inets_swig.rssi_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(rssi_sptr self) -> int"""
        return _inets_swig.rssi_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(rssi_sptr self, int i) -> long"""
        return _inets_swig.rssi_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(rssi_sptr self, long max_output_buffer)
        set_max_output_buffer(rssi_sptr self, int port, long max_output_buffer)
        """
        return _inets_swig.rssi_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(rssi_sptr self, int i) -> long"""
        return _inets_swig.rssi_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(rssi_sptr self, long min_output_buffer)
        set_min_output_buffer(rssi_sptr self, int port, long min_output_buffer)
        """
        return _inets_swig.rssi_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(rssi_sptr self) -> float"""
        return _inets_swig.rssi_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(rssi_sptr self) -> float"""
        return _inets_swig.rssi_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(rssi_sptr self) -> float"""
        return _inets_swig.rssi_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(rssi_sptr self) -> float"""
        return _inets_swig.rssi_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(rssi_sptr self) -> float"""
        return _inets_swig.rssi_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(rssi_sptr self) -> float"""
        return _inets_swig.rssi_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(rssi_sptr self, int which) -> float
        pc_input_buffers_full(rssi_sptr self) -> pmt_vector_float
        """
        return _inets_swig.rssi_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(rssi_sptr self, int which) -> float
        pc_input_buffers_full_avg(rssi_sptr self) -> pmt_vector_float
        """
        return _inets_swig.rssi_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(rssi_sptr self, int which) -> float
        pc_input_buffers_full_var(rssi_sptr self) -> pmt_vector_float
        """
        return _inets_swig.rssi_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(rssi_sptr self, int which) -> float
        pc_output_buffers_full(rssi_sptr self) -> pmt_vector_float
        """
        return _inets_swig.rssi_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(rssi_sptr self, int which) -> float
        pc_output_buffers_full_avg(rssi_sptr self) -> pmt_vector_float
        """
        return _inets_swig.rssi_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(rssi_sptr self, int which) -> float
        pc_output_buffers_full_var(rssi_sptr self) -> pmt_vector_float
        """
        return _inets_swig.rssi_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(rssi_sptr self) -> float"""
        return _inets_swig.rssi_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(rssi_sptr self) -> float"""
        return _inets_swig.rssi_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(rssi_sptr self) -> float"""
        return _inets_swig.rssi_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(rssi_sptr self) -> float"""
        return _inets_swig.rssi_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(rssi_sptr self) -> float"""
        return _inets_swig.rssi_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(rssi_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _inets_swig.rssi_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(rssi_sptr self)"""
        return _inets_swig.rssi_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(rssi_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _inets_swig.rssi_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(rssi_sptr self) -> int"""
        return _inets_swig.rssi_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(rssi_sptr self) -> int"""
        return _inets_swig.rssi_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(rssi_sptr self, int priority) -> int"""
        return _inets_swig.rssi_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(rssi_sptr self) -> std::string"""
        return _inets_swig.rssi_sptr_name(self)


    def symbol_name(self):
        """symbol_name(rssi_sptr self) -> std::string"""
        return _inets_swig.rssi_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(rssi_sptr self) -> io_signature_sptr"""
        return _inets_swig.rssi_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(rssi_sptr self) -> io_signature_sptr"""
        return _inets_swig.rssi_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(rssi_sptr self) -> long"""
        return _inets_swig.rssi_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(rssi_sptr self) -> basic_block_sptr"""
        return _inets_swig.rssi_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(rssi_sptr self, int ninputs, int noutputs) -> bool"""
        return _inets_swig.rssi_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(rssi_sptr self) -> std::string"""
        return _inets_swig.rssi_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(rssi_sptr self, std::string name)"""
        return _inets_swig.rssi_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(rssi_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _inets_swig.rssi_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(rssi_sptr self) -> swig_int_ptr"""
        return _inets_swig.rssi_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(rssi_sptr self) -> swig_int_ptr"""
        return _inets_swig.rssi_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(rssi_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _inets_swig.rssi_sptr_message_subscribers(self, which_port)

rssi_sptr_swigregister = _inets_swig.rssi_sptr_swigregister
rssi_sptr_swigregister(rssi_sptr)


rssi_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rssi = rssi.make;



